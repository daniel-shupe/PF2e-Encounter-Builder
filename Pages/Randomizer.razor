@page "/randomizer"

@using PF2eDataAccess
@using PF2eDataAccess.Models
@using PF2e_Encounter_Builder.Models

@inject ISqlDataAccess _db

<h3>Random Encounter Generator</h3>

@if (difficulties is null || monsters is null || expLevels is null || terrains is null || types is null)
{
    <p>Loading...</p>
}
else
{
<EditForm Model="@Encounter" OnValidSubmit="@GenerateEncounter">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-row">
        <label for="name" class="col-sm-2 col-form-label">Party Size:</label>
        <div class="col-sm-10">
            <InputNumber id="players" @bind-Value="@Encounter.Players"></InputNumber>
        </div>
    </div>
    <div class="form-row">
        <label for="name" class="col-sm-2 col-form-label">Party Level:</label>
        <div class="col-sm-10">
            <InputNumber id="level" @bind-Value="@Encounter.Level"></InputNumber>
        </div>
    </div>
    <div class="form-row">
        <label for="name" class="col-sm-2 col-form-label">Difficulty:</label>
        <div class="col-sm-10">
            <Select @onchange="DifficultyAdjustment">
                @foreach (var d in difficulties)
                {
                    <option value="@d.DifficultyId">@d.Name</option>
                }
            </Select>
        </div>
    </div>
    <div class="form-row">
        <label for="terrain" class="col-sm-2 col-form-label">Terrain:</label>
        <div class="col-sm-10">
            <InputSelect class="form-control" @bind-Value="Encounter.TerrainName">
                <br />
                <option value="0">ALL</option>
                @foreach (var t in terrains)
                    {
                    <option value=@t.TerrainId>@t.Name</option>
                    }
            </InputSelect><hr />
        </div>
    </div>
     <div class="form-row">
        <label for="terrain" class="col-sm-2 col-form-label">Type:</label>
        <div class="col-sm-10">
            <InputSelect class="form-control" @bind-Value="Encounter.TypeName">
                <br />
                <option value="0">ALL</option>
                @foreach (var t in types)
                    {
                    <option value=@t.TypeId>@t.Name</option>
                    }
            </InputSelect><hr />
        </div>
    </div>

    <p>XP Value: @ExpThreshhold</p>
    <button type="submit" class="btn btn-primary">Generate Encounter</button>
</EditForm>
    @if (encounterMonsters is null || encounterSet == false)
    {
        <p>No monsters in encounter.</p>
    }
    else
    {
        foreach (var e in encounterMonsters)
        {
            <div class="card">
                <div class="card-header">
                    <p>@e.MonsterName - @e.Level</p>
                </div>
            </div>
        }
    }
}

@code {
    private DisplayEncounterModel Encounter = new DisplayEncounterModel();
    private List<MonsterModel> monsters;
    private List<DifficultyModel> difficulties;
    private List<LevelModModel> expLevels;
    private List<MonsterModel> encounterMonsters;
    private List<TerrainModel> terrains;
    private List<CreatureTypeModel> types;
    private int ExpThreshhold = 40;
    private int ExpModifier = 10;
    private int difficultyMod = 1;
    private bool encounterSet = false;

    protected override async Task OnInitializedAsync()
    {
        string sql = "select * from dbo.monster;";
        monsters = await _db.LoadData<MonsterModel, dynamic>(sql, new { });
        encounterMonsters = monsters;
        sql = "select * from dbo.difficulty;";
        difficulties = await _db.LoadData<DifficultyModel, dynamic>(sql, new { });
        sql = "select * from dbo.levelmod;";
        expLevels = await _db.LoadData<LevelModModel, dynamic>(sql, new { });
        sql = "select * from dbo.terrain;";
        terrains = await _db.LoadData<TerrainModel, dynamic>(sql, new { });
        sql = "select * from dbo.type;";
        types = await _db.LoadData<CreatureTypeModel, dynamic>(sql, new { });
    }

    private async Task GenerateEncounter()
    {
        //  clear encounter monster list
        encounterMonsters.Clear();
        //  used for random selection
        var random = new Random();
        int index = 1;
        //  deterimine level range for monsters in the encounter (+/- 4 to party level)
        int level_min;  //  is dependent on party size, since lowest monster is Level -1
        int level_max = Encounter.Level + (difficultyMod - 1);
        int expBudget = ExpThreshhold;
        //  variables used to resize monster list
        int levelCap = level_max;
        //  calculate exp value of monster
        int levelDifference;
        int exp;
        //  used for sql statement parameters
        int terrainId = 0;

        if (Encounter.Level < 3)    //  ensures minimun level is at least -1
        {
            level_min = -1;
        }
        else
        {
            level_min = Encounter.Level - 4;
        }
        //  retrieve elligible monsters from database
        string sql = "select * from dbo.Monster where Level between @min and @max";
        if (Encounter.TerrainName != "0" && !(Encounter.TerrainName is null))
        {
            terrainId = Int32.Parse(Encounter.TerrainName);
            sql += " AND TerrainId=@terrainId;";
            monsters = await _db.LoadData<MonsterModel, dynamic>(sql, new { min = level_min, max = level_max, terrainId = terrainId });
        }
        else
        {
            sql += ";";
            monsters = await _db.LoadData<MonsterModel, dynamic>(sql, new { min = level_min, max = level_max });
        }

        //  adjust xp budget for difficulty based on party size
        if (Encounter.Players < 4)
        {
            int diff = 4 - Encounter.Players;
            expBudget = ExpThreshhold - (diff * ExpModifier);
        }

        else if (Encounter.Players > 4)
        {
            int diff = Encounter.Players - 4;
            expBudget = ExpThreshhold + (diff * ExpModifier);
        }
        //  loop to add monsters
        while (expBudget >= 10)
        {
            //  select a random monster and add it to the encounter
            index = random.Next(monsters.Count);
            if (index >= 0)  //  prevent index out of range
            {
                //  get monster exp cost
                levelDifference = monsters[index].Level - Encounter.Level; //   difference between monster level and party level
                LevelModModel level = expLevels.Find(x => x.LevelModId == levelDifference); //  find exp based on level difference
                exp = level.Exp;
                //  ensure selected monster is within budget
                if (exp <= expBudget)
                {
                    //  add monster to encounter
                    encounterMonsters.Add(monsters[index]);
                    //  subtract monster from exp budget
                    expBudget -= exp;
                }
                //  remove monsters from pool that would exceed expBudget
                level = expLevels.FindLast(x => x.Exp <= expBudget);
                if (level is null)
                {
                    expBudget = 0;
                    break;
                }
                //  if not enough experience in budget for another monster, terminate loop
                levelCap = Encounter.Level + level.LevelModId;
                if (levelCap < -1)
                {
                    break;
                }
                monsters.RemoveAll(m => m.Level > levelCap);
            }
            //  index = 0 would cause infinite loop, 
            else
            {
                encounterSet = true;
                break;
            }
        }
        //  set encounter generated flag
        encounterSet = true;
    }

    private async Task DifficultyAdjustment(ChangeEventArgs e)
    {
        string selection = e.Value.ToString();
        difficultyMod = Int32.Parse(selection);
        string sql = "select * from dbo.Difficulty where DifficultyId = @id;";
        List<DifficultyModel> dm = await _db.LoadData<DifficultyModel, dynamic>(sql, new { id = difficultyMod });
        DifficultyModel d = dm.First();
        ExpThreshhold = d.MinExp;
        ExpModifier = d.MaxExp;
    }
}